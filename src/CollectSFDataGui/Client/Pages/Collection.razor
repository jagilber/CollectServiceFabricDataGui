@page "/collection"
@using CollectSFDataGui.Shared
@using CollectSFData.Azure
@using CollectSFData.Common
@using CollectSFData
@using BlazorApp.Helpers
@using Microsoft.Extensions.Logging
@using Radzen.Blazor

@using System.IO
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net
@inject DialogService DialogService
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject ILogger<Configuration> logger
@inject IJSRuntime JS
@inject NotificationService notificationService

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>

@if (_config == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4 class="rz-text-h4">Collection</h4>
    <RadzenTemplateForm Data="@_config" Submit="@((ConfigurationProperties args) => { Submit(args); })">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Collection Information">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Gather Type" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDropDown TValue="string" @bind-Value:get=@_config.GatherType AllowClear="true"
                                Placeholder="select gather type" Data=@GatherTypes style="width: 100%;" Name="GatherType">
                            </RadzenDropDown>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Start Time Stamp" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker style="width: 100%;" TValue="DateTimeOffset" Name="StartDate"
                                @bind-Value:get=@_config.StartTimeUtc />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="End Time Stamp" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker style="width: 100%;" TValue="DateTimeOffset" Name="EndDate"
                                @bind-Value:get=@_config.EndTimeUtc />
                        </div>
                    </div>
                </RadzenFieldset>
                <RadzenFieldset Text="Operations">
                    <div class="row justify-content-left">
                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Light" Icon="cancel"
                            style="margin-left: 20px;" Text="Start" />
                        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Secondary" style="margin-left: 20px;"
                            Click=@SaveFile />
                        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="margin-left: 20px;" Text="Cancel"
                            Click="@Cancel" />
                    </div>
                </RadzenFieldset>
            </div>
        </div>
    </RadzenTemplateForm>
    <RadzenTemplateForm TItem="Total" Data=@_total>
        <RadzenFieldset Text="Collection Counters">
            <div class="row">
                <RadzenColumn>
                    <div class="col-md-6">
                        @* <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Gather Type" />
                    </div>
                    <div class="col-md-8">
                    </div>
                    </div> *@
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Discovered Start Time Stamp" />
                                <RadzenTextBox Placeholder="min" @bind-Value:get=@DiscoveredMinDateTime style="width: 100%;"
                                    Name="DiscoveredMinDate" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Discovered End Time Stamp" />
                                <RadzenTextBox Placeholder="max" @bind-Value:get=@DiscoveredMaxDateTime style="width: 100%;"
                                    Name="DiscoveredMaxDate" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        @* <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Timed Out" />
                    <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@TimedOut style="width: 100%;"
                    Name="TimedOut" ReadOnly="true"/>
                    </div>
                    <div class="col-md-8">
                    </div>
                    </div> *@
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Errors" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Errors
                                    style="width: 100%;" Name="Errors" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Failed" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Failed
                                    style="width: 100%;" Name="Failed" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Converted" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Converted
                                    style="width: 100%;" Name="Converted" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Downloaded" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Downloaded
                                    style="width: 100%;" Name="Downloaded" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Downloading" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Downloading
                                    style="width: 100%;" Name="Downloading" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Enumerated" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Enumerated
                                    style="width: 100%;" Name="Enumerated" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Formatted" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Formatted
                                    style="width: 100%;" Name="Formatted" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                    </div>
                </RadzenColumn>
                <RadzenColumn>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Formatting" />
                            <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Formatting
                                style="width: 100%;" Name="Formatting" ReadOnly="true" />
                        </div>
                        <div class="col-md-8">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Matched" />
                            <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Matched
                                style="width: 100%;" Name="Matched" ReadOnly="true" />
                        </div>
                        <div class="col-md-8">
                        </div>
                    </div>
                    @* </div> *@
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Queued" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Queued
                                    style="width: 100%;" Name="Queued" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Records" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Records
                                    style="width: 100%;" Name="Records" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Skipped" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Skipped
                                    style="width: 100%;" Name="Skipped" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Succeeded" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Succeeded
                                    style="width: 100%;" Name="Succeeded" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Unknown" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Unknown
                                    style="width: 100%;" Name="Unknown" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4 align-items-center d-flex">
                                <RadzenLabel Text="Uploading" />
                                <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value:get=@_total.Uploading
                                    style="width: 100%;" Name="Uploading" ReadOnly="true" />
                            </div>
                            <div class="col-md-8">
                            </div>
                        </div>
                    </div>
                </RadzenColumn>
            </div>
            @* </div> *@
        </RadzenFieldset>
    </RadzenTemplateForm>
    <RadzenFieldset Text="Collector Logs">
        @* todo *@
        <LogConsole @ref=@_logConsole />
    </RadzenFieldset>

    <EventConsole @ref=@_console />
}

@code {
    List<string> GatherTypes;
    Total _total = new Total();
    ConfigurationProperties _config { get; set; } = new ConfigurationProperties();
    ConfigurationProperties _tempConfig { get; set; }
    EventConsole _console;
    LogConsole _logConsole;
    Instance _instance;
    List<string> _queuedConsoleMessages = new List<string>();
    List<string> _queuedLogConsoleMessages = new List<string>();
    List<NotificationMessage> _queuedNotifications = new List<NotificationMessage>();
    const string _defaultConfigurationFile = "collectsfdata.options.json";

    protected override async Task OnInitializedAsync()
    {
#if DEBUG
//await Task.Delay(10000);
#endif

        GatherTypes = Enum.GetNames(typeof(CollectSFData.DataFile.FileTypesEnum)).ToList();
#if !RADZEN
        await GetCurrentConfig();

        if (string.IsNullOrEmpty(_config.SaveConfiguration))
        {
            _config.SaveConfiguration = _defaultConfigurationFile;
        }
#endif
        _logConsole = new LogConsole();
        _console = new EventConsole();
        //_instance = Instance.Clone();
    }

    void Cancel()
    {
        Http.CancelPendingRequests();
    }

    async Task<string[]> CheckMessages()
    {
        string[] messages = await Http.GetFromJsonAsync<string[]>("api/collection/messages",
        JsonHelpers.GetJsonSerializerOptions());
        if (messages != null)
        {
            await ClearMessages();
        }
        // ConsoleLog($"CheckStatus():Server response:", messages);
        foreach (string message in messages)
        {
            LogConsoleLog(message);
        }
        return messages;
    }

    async Task<string> CheckStatus()
    {
        string status = await Http.GetFromJsonAsync<string>("api/collection/status",
        JsonHelpers.GetJsonSerializerOptions());
        ConsoleLog($"CheckStatus():Server response:", status);
        return status;
    }

    async Task<bool> ClearMessages()
    {
        //_queuedLogConsoleMessages.Clear();
        return await Http.GetFromJsonAsync<bool>("api/collection/messages/clear");
    }

    void ConsoleLog(string message, object jsonObject = null)
    {
        if (jsonObject != null)
        {
            StringBuilder sb = new StringBuilder(message);
            sb.AppendLine(JsonSerializer.Serialize(_config, new JsonSerializerOptions { WriteIndented = true }));
            message = sb.ToString();
        }

        _queuedConsoleMessages.Add(message);

        if (_console != null)
        {
            _console.Log(message);
        }
    }

    async Task GetCurrentConfig()
    {
        _config = await Http.GetFromJsonAsync<ConfigurationProperties>("api/configuration/json",
        JsonHelpers.GetJsonSerializerOptions());
        ConsoleLog($"GetCurrentConfig():Server response:", _config);
    }

    void LogConsoleLog(string message)
    {
        _queuedLogConsoleMessages.Add(message);

        if (_logConsole != null)
        {
            _logConsole.Log(message);
        }
    }

    void OnKeyPress(string value, Radzen.DialogService sender)
    {
        //Enter
        var keyboardInput = value;
        if (keyboardInput == "Enter")
        {
            sender.Close(true);
        }
    }

    void OnSetFileSavePath(string value)
    {

        _config.SaveConfiguration = value;
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        string jsonString = args.RawResponse;

        ConsoleLog($"Server response: {jsonString}");
        StartCollection(jsonString);
    }

    public async Task ResultData()
    {
        // _config = null;
        await CheckStatus();
        await CheckMessages();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    //public string DiscoveredMinDateTime { get=>(new DateTime(_instance.DiscoveredMinDateTicks)).ToString();}
    //public string DiscoveredMaxDateTime { get=>(new DateTime(_instance.DiscoveredMaxDateTicks)).ToString();}
    //public string TimedOut { get=>_instance.TimedOut.ToString();}

    public string DiscoveredMinDateTime { get => (new DateTime(DateTime.MinValue.Ticks)).ToString(); set => _ = value; }
    public string DiscoveredMaxDateTime { get => (new DateTime(DateTime.MaxValue.Ticks)).ToString(); set => _ = value; }
    public string TimedOut { get => false.ToString(); set => _ = value; }

    public string TicksToDateTime(long ticks)
    {
        if (ticks == 0)
        {
            return string.Empty;
        }
        return new DateTime(ticks).ToString();
    }

    public MemoryStream Serialize()
    {
        //https://stackoverflow.com/questions/8157636/can-json-net-serialize-deserialize-to-from-a-stream
        var fileStream = new MemoryStream();
        using (StreamWriter writer = new StreamWriter(fileStream))
            writer.Write(JsonSerializer.Serialize(_config));

        return new MemoryStream(fileStream.ToArray());
    }

    async Task SaveFile()
    {
        //https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-7.0
        var fileStream = Serialize();
        var fileName = _config.SaveConfiguration;

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        _queuedNotifications.Add(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    void Submit(ConfigurationProperties arg)
    {
        StartCollection();
    }

    async void StartCollection(string uploadedJson = null)
    {
        HttpResponseMessage response = new HttpResponseMessage();
        response = await Http.PostAsJsonAsync("api/collection/start", uploadedJson, JsonHelpers.GetJsonSerializerOptions());
        string jsonString = await response.Content.ReadAsStringAsync();
        ConsoleLog($"StartCollection:responseString:{jsonString}");
        jsonString = jsonString.Replace("\"{", "{").Replace("}\"", "}").Replace("\\\"", "\"");

        if (response.StatusCode == HttpStatusCode.Created)
        {
            ConfigurationProperties configurationProperties = JsonSerializer.Deserialize<ConfigurationProperties>(jsonString,
            JsonHelpers.GetJsonSerializerOptions());
            ConsoleLog($"StartCollection:configurationProperties:{configurationProperties.NoProgressTimeoutMin}");
            _config = configurationProperties;
        }
        else
        {
            ConsoleLog($"ERROR:{response.StatusCode}", response);
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail =
                $"Error:{response.StatusCode}:{response.ReasonPhrase}:{await response.Content.ReadAsStringAsync()}"
                });
            //await GetCurrentConfig();
        }
        await ResultData();
    }
    string CreateJson<T>(T value)
    {
        string jsonString = JsonSerializer.Serialize(value, JsonHelpers.GetJsonSerializerOptions());
        ConsoleLog($"CreateJsonResult:enter:jsonString:{jsonString}");

        return jsonString;
    }

}